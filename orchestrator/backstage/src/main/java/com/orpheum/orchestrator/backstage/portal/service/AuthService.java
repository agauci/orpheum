package com.orpheum.orchestrator.backstage.portal.service;

import com.orpheum.orchestrator.backstage.portal.exception.AuthTokenNotFoundException;
import com.orpheum.orchestrator.backstage.portal.model.auth.BackstageAuthorisationRequest;
import com.orpheum.orchestrator.backstage.portal.model.auth.GatewayAuthorisationOutcome;
import com.orpheum.orchestrator.backstage.portal.model.user.UserData;
import com.orpheum.orchestrator.backstage.portal.repository.AuthRepository;
import com.orpheum.orchestrator.backstage.portal.repository.UserDataRepository;
import com.orpheum.orchestrator.backstage.portal.support.PortalConfig;
import com.orpheum.orchestrator.backstage.portal.support.PortalConfig.SiteConfigDetails;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;

import java.util.List;
import java.util.concurrent.CompletableFuture;

@Slf4j
@Component
public class AuthService {

    @Autowired
    AuthRepository authRepository;

    @Autowired
    UserDataRepository userDataRepository;

    @Value("${backstage.portal.api-tokens}")
    private List<String> apiTokens;

    @Autowired
    PortalConfig portalConfig;

    public List<BackstageAuthorisationRequest> getPendingAuthorisations(String siteIdentifier, String authToken) {
        validateAuthToken(authToken);

        final List<BackstageAuthorisationRequest> resolvedPendingAuthorisations = authRepository.getPendingAuthorisations(siteIdentifier);
        log.trace("Resolved {} pending authorisation requests. [Requests: {}]", resolvedPendingAuthorisations.size(), resolvedPendingAuthorisations);

        return resolvedPendingAuthorisations;
    }

    public void onAuthorizationOutcome(GatewayAuthorisationOutcome outcome, String authToken) {
        validateAuthToken(authToken);
        authRepository.onAuthorizationOutcome(outcome);
    }

    public CompletableFuture<GatewayAuthorisationOutcome> startAuthorisation(String macAddress,
                                                                             String accessPointMacAddress,
                                                                             Long timestamp,
                                                                             String ip,
                                                                             String siteIdentifier,
                                                                             String firstName,
                                                                             String lastName,
                                                                             String email,
                                                                             SiteConfigDetails siteConfigDetails) {
        log.debug("Attempting looking for email {}", email);
        UserData userData = userDataRepository.findByEmail(email);
        if (userData == null) {
            log.debug("No entry found for email {}. Creating new entry.", email);
            userDataRepository.save(
                // The ID is auto-generated by the database
                new UserData(firstName, lastName, email, portalConfig.getConsentText(), siteConfigDetails.getFriendlyName())
            );
        } else {
            log.debug("Entry already found for {}. Skipping creation.", email);
        }

        return authRepository.startAuthorisation(macAddress, accessPointMacAddress, siteIdentifier, ip, timestamp);
    }

    private void validateAuthToken(String authToken) {
        if (!apiTokens.contains(authToken)) {
            throw new AuthTokenNotFoundException(authToken);
        }
    }

}
